{"version":3,"sources":["svg/Arrow.jsx","ui/splashItems/Begin.jsx","ui/splashItems/ProjectItem.jsx","ui/splashItems/Projects.jsx","ui/splashItems/Resume.jsx","ui/Splash.js","App.js","serviceWorker.js","index.js"],"names":["Arrow","rotate","onClick","className","width","height","viewBox","style","transform","fill","d","Begin","GitHubCalendar","responsive","then","document","querySelectorAll","forEach","el","querySelector","backgroundColor","src","alt","props","changeIndex","Component","ProjectItem","state","currentPicture","github","linkedin","changePicture","bind","handleMouse","startChange","this","changeStarted","rand","Math","floor","random","setTimeout","setState","project","images","length","field","val","backgroundImage","name","description","href","githubUrl","target","rel","liveUrl","projects","Projects","nav","addEventListener","scrollTop","map","p","key","Resume","Splash","currentPageIndex","splashImages","navLinks","App","updateBackgroundImage","setInterval","idx","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yZAUeA,G,kBARD,SAAC,GAA2B,IAAD,IAAzBC,cAAyB,MAAhB,EAAgB,EAAbC,EAAa,EAAbA,QACxB,OACI,yBAAKC,UAAU,aAAaC,MAAM,OAAOC,OAAO,OAAOC,QAAQ,sBAAsBC,MAAO,CAACC,UAAU,UAAD,OAAYP,EAAZ,SAA2BC,QAASA,GACtI,0BAAMO,KAAK,QAAQC,EAAE,yS,gBCqClBC,G,kMApCPC,IAAe,UAAW,UAAW,CAACC,YAAY,IAAOC,MAAK,WAC1DC,SAASC,iBAAiB,wBAAwBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGX,MAAME,KAAO,qBAChFM,SAASI,cAAc,yCAAyCZ,MAAMa,gBAAkB,kBACxFL,SAASC,iBAAiB,wBAAwBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGX,MAAME,KAAO,aAChFM,SAASI,cAAc,yCAAyCZ,MAAMa,gBAAkB,UACxFL,SAASC,iBAAiB,wBAAwBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGX,MAAME,KAAO,aAChFM,SAASI,cAAc,yCAAyCZ,MAAMa,gBAAkB,UACxFL,SAASC,iBAAiB,wBAAwBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGX,MAAME,KAAO,aAChFM,SAASI,cAAc,yCAAyCZ,MAAMa,gBAAkB,UACxFL,SAASC,iBAAiB,wBAAwBC,SAAQ,SAAAC,GAAE,OAAIA,EAAGX,MAAME,KAAO,aAChFM,SAASI,cAAc,yCAAyCZ,MAAMa,gBAAkB,e,+BAItF,IAAD,OACL,OACI,yBAAKjB,UAAU,SACX,yBAAKA,UAAU,YACX,yBAAKkB,IAAI,4BAA4BC,IAAI,cAE7C,yBAAKnB,UAAU,yBACX,yBAAKA,UAAU,eACX,6CACA,4HACA,wDAEJ,6BAAK,kBAAC,EAAD,CAAOF,OAAQ,IAAKC,QAAS,kBAAM,EAAKqB,MAAMC,YAAY,OAC/D,yBAAKrB,UAAU,iB,GA7BfsB,c,QC6DLC,G,kBA5DX,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTC,eAAgB,EAChBC,QAAQ,EACRC,UAAU,GAEd,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBATJ,E,iFAYfG,KAAKC,eAAgB,EACrBD,KAAKD,gB,oCAGL,IAEMG,EAAOC,KAAKC,MAAM,KAAAD,KAAKE,SAFd,KAGXL,KAAKC,cAAeD,KAAKJ,gBACxBI,KAAKC,eAAgB,EAC1BK,WAAWN,KAAKD,YAAaG,K,sCAI7BF,KAAKO,SAAS,CAACd,gBAAiBO,KAAKR,MAAMC,eAAiB,GAAKO,KAAKZ,MAAMoB,QAAQC,OAAOC,W,kCAEnFC,EAAOC,GACfZ,KAAKO,SAAL,eACKI,EAAQC,M,+BAGR,IACEJ,EAAWR,KAAKZ,MAAhBoB,QACP,OACI,yBAAKxC,UAAU,eACX,yBAAKA,UAAU,UAAUI,MAAO,CAACyC,gBAAgB,OAAD,OAASL,EAAQC,OAAOT,KAAKR,MAAMC,gBAAnC,QAChD,yBAAKzB,UAAU,kBACX,yBAAKA,UAAU,SACVwC,EAAQM,MAEb,yBAAK9C,UAAU,eACVwC,EAAQO,aAEb,yBAAK/C,UAAU,WACX,yBAAKA,UAAU,eACX,uBAAGgD,KAAMR,EAAQS,UAAWC,OAAO,SAASC,IAAI,uBAAhD,WAEJ,yBAAKnD,UAAU,eACX,uBAAGgD,KAAMR,EAAQY,QAASF,OAAO,SAASC,IAAI,uBAA9C,qB,GAlDF7B,cCDpB+B,G,MAAW,CACb,CACIP,KAAM,YACNC,YAAa,wFACbK,QAAS,yBACTH,UAAW,uCACXR,OAAQ,CAAC,mDAAoD,6CAA8C,kDAE/G,CACIK,KAAM,oBACNC,YAAa,gRACbK,QAAS,0CACTH,UAAW,+CACXR,OAAQ,CAAC,wDAAyD,kDAAmD,0DAEzH,CACIK,KAAM,cACNC,YAAa,sQACbK,QAAS,yCACTH,UAAW,yCACXR,OAAQ,CAAC,6CAA8C,4CAA6C,iDAExG,CACIK,KAAM,UACNC,YAAa,0KACbK,QAAS,mCACTH,UAAW,0CACXR,OAAQ,CAAC,oCAAqC,yCA4BvCa,E,4LAvBP,IAAMC,EAAM3C,SAASI,cAAc,QACnCJ,SAASI,cAAc,aAAawC,iBAAiB,UAAU,WACvDxB,KAAKyB,UAAY,GAAKF,EACtBA,EAAInD,MAAMa,gBAAkB,kBACtBsC,IACNA,EAAInD,MAAMa,gBAAkB,W,+BAOpC,OACI,yBAAKjB,UAAU,YACVqD,EAASK,KAAI,SAAAC,GACV,OAAO,kBAAC,EAAD,CAAaC,IAAKD,EAAEb,KAAMN,QAASmB,Y,GAjBvCrC,aCpBRuC,G,MATA,WAEX,OACI,yBAAK7D,UAAU,UACX,4BAAQkB,IAAI,iCCaT4C,EAbA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,iBAAkB1C,EAAiB,EAAjBA,YACzBkC,EAAM3C,SAASI,cAAc,QAGnC,OAFyB,IAArB+C,GAA0BR,EAAKA,EAAInD,MAAMa,gBAAkB,kBACtDsC,IAAKA,EAAInD,MAAMa,gBAAkB,MAEtC,yBAAKjB,UAAU,SAASI,MAAO,CAACC,UAAU,eAAD,OAAoC,IAAnB0D,EAAjB,QACrC,kBAAC,EAAD,CAAO1C,YAAaA,IACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXN2C,EAAe,CACjB,kBACA,aACA,UACA,gBACA,WACA,eACA,sBACA,gBACA,+BACA,sBAGA,kBACA,UAGEC,EAAW,CAAC,OAAQ,YA+DXC,E,YA7DX,WAAY9C,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTqB,gBAAiB,EACjBkB,iBAAkB,GAEtB,EAAKI,sBAAwB,EAAKA,sBAAsBtC,KAA3B,gBAC7B,EAAKR,YAAc,EAAKA,YAAYQ,KAAjB,gBAPJ,E,iFAUfuC,YAAYpC,KAAKmC,sBAAuB,O,kCAEhCE,GACRrC,KAAKO,SAAS,CACVwB,iBAAkBM,M,8CAItBrC,KAAKO,SAAS,CACVM,iBAAkBb,KAAKR,MAAMqB,gBAAkB,GAAKmB,EAAatB,W,+BAGhE,IAAD,SACuCV,KAAKR,MAAzCuC,EADH,EACGA,iBAAkBlB,EADrB,EACqBA,gBACzB,OACI,yBAAK7C,UAAU,MAAMI,MAAO,CAACyC,gBAAgB,cAAD,OAAgBmB,EAAanB,GAA7B,OACxC,yBAAK7C,UAAU,OACX,yBAAKA,UAAU,aACViE,EAASP,KAAI,SAAC3C,EAAIsD,GACf,OAAO,0BAAMT,IAAKS,EAAKrE,UAAW+D,IAAqBM,EAAM,WAAa,GAAItE,QAAS,kBAAM,EAAKsB,YAAYgD,KACzGtD,OAIb,yBAAKf,UAAU,YACX,0BAAMD,QAAS,kBAAM,EAAKsB,YAAY,KAClC,yBAAKH,IAAI,2BAA2BC,IAAI,WAD5C,WAKJ,yBAAKnB,UAAU,YACX,uBAAGgD,KAAK,6BAA6BE,OAAO,SAASC,IAAI,uBACrD,yBAAKjC,IAAI,4BAA4BC,IAAI,WAD7C,UAIA,uBAAG6B,KAAK,wCAAwCE,OAAO,SAASC,IAAI,uBAChE,yBAAKjC,IAAI,6BAA6BC,IAAI,aAD9C,YAIA,uBAAG6B,KAAK,8BAA8BE,OAAO,SAASC,IAAI,uBACtD,yBAAKjC,IAAI,8BAA8BC,IAAI,cAD/C,eAMR,kBAAC,EAAD,CAAQ4C,iBAAkBA,EAAkB1C,YAAaW,KAAKX,mB,GAxD5DC,aCXEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShE,SAASiE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrE,MAAK,SAAAsE,GACjCA,EAAaC,kB","file":"static/js/main.d9bd221f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Arrow = ({rotate = 0, onClick}) => {\n    return (\n        <svg className=\"next-arrow\" width=\"16px\" height=\"16px\" viewBox=\"0 0 451.847 451.847\" style={{transform: `rotate(${rotate}deg)`}} onClick={onClick}>\n            <path fill=\"black\" d=\"M225.923 354.706c-8.098 0-16.195-3.092-22.37-9.263L9.27 151.157c-12.36-12.36-12.36-32.397 0-44.75 12.354-12.355 32.388-12.355 44.748 0L225.923 278.32 397.83 106.413c12.358-12.354 32.39-12.354 44.743 0 12.365 12.354 12.365 32.392 0 44.75L248.293 345.45c-6.178 6.17-14.275 9.256-22.37 9.256z\"></path>\n        </svg>\n    );\n};\n\nexport default Arrow;","import React, {Component} from 'react';\nimport Arrow from \"../../svg/Arrow\";\nimport GitHubCalendar from 'github-calendar'\nimport '../../scss/garden.css';\nclass Begin extends Component {\n    componentDidMount() {\n        GitHubCalendar('.garden', 'jonbent', {responsive: true}).then(() => {\n            document.querySelectorAll('rect[fill=\"#ebedf0\"]').forEach(el => el.style.fill = \"rgba(0,0,0,0.5)\");\n            document.querySelector('li[style=\"background-color: #ebedf0\"]').style.backgroundColor = \"rgba(0,0,0,0.5)\";\n            document.querySelectorAll('rect[fill=\"#c6e48b\"]').forEach(el => el.style.fill = \"#BFCDE0\");\n            document.querySelector('li[style=\"background-color: #c6e48b\"]').style.backgroundColor = \"#BFCDE0\";\n            document.querySelectorAll('rect[fill=\"#7bc96f\"]').forEach(el => el.style.fill = \"#5D5D81\");\n            document.querySelector('li[style=\"background-color: #7bc96f\"]').style.backgroundColor = \"#5D5D81\";\n            document.querySelectorAll('rect[fill=\"#239a3b\"]').forEach(el => el.style.fill = \"#3B3355\");\n            document.querySelector('li[style=\"background-color: #239a3b\"]').style.backgroundColor = \"#3B3355\";\n            document.querySelectorAll('rect[fill=\"#196127\"]').forEach(el => el.style.fill = \"#2f2842\");\n            document.querySelector('li[style=\"background-color: #196127\"]').style.backgroundColor = \"#2f2842\";\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"Begin\">\n                <div className=\"headshot\">\n                    <img src=\"images/headshot_small.png\" alt=\"Jon Bent\"/>\n                </div>\n                <div className=\"description-container\">\n                    <div className=\"description\">\n                        <div>Hey, I'm Jon</div>\n                        <div>A Software Engineer with a nack for troubleshooting, and an interest in anything technology</div>\n                        <div>Check out my projects!</div>\n                    </div>\n                    <div><Arrow rotate={270} onClick={() => this.props.changeIndex(1)}/></div>\n                    <div className=\"garden\">\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Begin;","import React, {Component} from 'react';\n\nimport '../../scss/ProjectItem.scss'\n\nclass ProjectItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPicture: 0,\n            github: false,\n            linkedin: false\n        };\n        this.changePicture = this.changePicture.bind(this);\n        this.handleMouse = this.handleMouse.bind(this);\n        this.startChange = this.startChange.bind(this);\n    }\n    componentDidMount() {\n        this.changeStarted = false;\n        this.startChange();\n    }\n    startChange(){\n        const minInt = 5000;\n        const maxInt = 8000;\n        const rand = Math.floor(Math.random() * (maxInt - minInt + 1) + minInt);\n        if (this.changeStarted) this.changePicture();\n        else this.changeStarted = true;\n        setTimeout(this.startChange, rand);\n    }\n    changePicture(){\n\n        this.setState({currentPicture: (this.state.currentPicture + 1) % this.props.project.images.length })\n    }\n    handleMouse(field, val){\n        this.setState({\n            [field]: val,\n        })\n    }\n    render(){\n        const {project} = this.props;\n        return (\n            <div className=\"ProjectItem\">\n                <div className=\"picture\" style={{backgroundImage: `url(${project.images[this.state.currentPicture]})`}}></div>\n                <div className=\"title-and-desc\">\n                    <div className='title'>\n                        {project.name}\n                    </div>\n                    <div className='description'>\n                        {project.description}\n                    </div>\n                    <div className=\"actions\">\n                        <div className=\"github-link\">\n                            <a href={project.githubUrl} target=\"_blank\" rel=\"noopener noreferrer\">Github</a>\n                        </div>\n                        <div className=\"linked-link\">\n                            <a href={project.liveUrl} target=\"_blank\" rel=\"noopener noreferrer\">Live Site</a>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n\n    }\n};\n\nexport default ProjectItem;","import React, {Component} from 'react';\nimport ProjectItem from \"./ProjectItem\";\nimport '../../scss/Projects.scss'\nconst projects = [\n    {\n        name: \"BakedMaps\",\n        description: \"A pixel perfect clone of weedmaps, using an undocumented API to fetch real time data.\",\n        liveUrl: \"https://baked-maps.com\",\n        githubUrl: \"https://github.com/jonbent/bakedmaps\",\n        images: ['images/projects/baked-maps/baked-maps-splash.png', 'images/projects/baked-maps/bakery-show.gif', 'images/projects/baked-maps/baked-maps-map.png']\n    },\n    {\n        name: \"Dumbells N Donuts\",\n        description: \"Dumbells-N-Donuts is a mobile friendly fitness website, which hopes to help manage user's workouts and meals in a flexible way.\\n\\nA user can decide to choose from already defined exhaustive list of meals and exercises or have their own custom meals and form a routine.\",\n        liveUrl: \"https://dumbells-n-donuts.herokuapp.com\",\n        githubUrl: \"https://github.com/jonbent/dumbells-n-donuts\",\n        images: ['images/projects/dumbells-n-donuts/dumbells-splash.gif', 'images/projects/dumbells-n-donuts/user-show.png', 'images/projects/dumbells-n-donuts/muscle-selector.png']\n    },\n    {\n        name: \"BuildAVirus\",\n        description: \"Upgrade a sample virus until you either kill off the entire world, or the world builds immunity to you. Users are given a couple viruses to choose to start from.\\n\\nKilling off more people will award more points, which in turn allows upgrades to be purchased.\",\n        liveUrl: \"https://jonbent.github.io/BuildAVirus/\",\n        githubUrl: \"https://github.com/jonbent/buildavirus\",\n        images: ['images/projects/build-a-virus/map-show.png', 'images/projects/build-a-virus/map-gif.gif', 'images/projects/build-a-virus/world-news.gif']\n    },\n    {\n        name: \"Ask Jon\",\n        description: \"I built an app for my fellow cohort mates to use when stuck on a coding problem at AppAcademy.\\n\\nAs soon as you ask a question, I get a text, and I head right to you!\",\n        liveUrl: \"https://ask-jon.herokuapp.com/#/\",\n        githubUrl: \"https://github.com/jonbent/AskAQuestion\",\n        images: ['images/projects/ask-jon/queue.png', 'images/projects/ask-jon/splash.gif']\n    }\n];\nclass Projects extends Component {\n    componentDidMount() {\n        const nav = document.querySelector('.nav');\n        document.querySelector(\".Projects\").addEventListener('scroll', function () {\n            if (this.scrollTop > 0 && nav){\n                nav.style.backgroundColor = \"rgba(0,0,0,0.5)\";\n            } else if(nav) {\n                nav.style.backgroundColor = null;\n            }\n            //\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"Projects\">\n                {projects.map(p => {\n                    return <ProjectItem key={p.name} project={p} />\n                })}\n            </div>\n        );\n    }\n\n};\n\nexport default Projects;","import React from 'react';\nimport '../../scss/Resume.scss'\n\n\nconst Resume = () => {\n\n    return (\n        <div className=\"Resume\">\n            <iframe src=\"files/jon_bent_resume.pdf\" />\n        </div>\n    );\n};\n\nexport default Resume;","import React from 'react';\n\nimport '../scss/Splash.scss'\nimport Begin from \"./splashItems/Begin\";\nimport Projects from \"./splashItems/Projects\";\nimport Resume from \"./splashItems/Resume\";\n\n\nconst Splash = ({currentPageIndex, changeIndex}) => {\n    const nav = document.querySelector('.nav');\n    if (currentPageIndex === 2 && nav) nav.style.backgroundColor = \"rgba(0,0,0,0.5)\";\n    else if (nav) nav.style.backgroundColor = null;\n    return (\n        <div className=\"Splash\" style={{transform: `translateX(-${currentPageIndex * 100}%)`}}>\n            <Begin changeIndex={changeIndex}/>\n            <Projects/>\n            <Resume/>\n        </div>\n    );\n}\n\nexport default Splash;","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './scss/reset.scss';\nimport './App.scss';\nimport Splash from './ui/Splash'\nconst splashImages = [\n    \"bird-shadow.jpg\",\n    \"galaxy.jpg\",\n    'war.jpg',\n    \"cant-swim.jpg\",\n    \"cpus.jpg\",\n    \"my-comp.jpeg\",\n    \"eye-with-person.jpg\",\n    'lord-ring.jpg',\n    'never-failed-never-tried.jpg',\n    'keep-on-digging.jpg',\n    // 'not-doing-shit.jpg',\n    // 'not-gonna-survive.jpg',\n    'tomb-raider.jpg',\n    'up.jpg',\n\n];\nconst navLinks = [\"Home\", \"Projects\"];\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            backgroundImage: 0,\n            currentPageIndex: 0\n        };\n        this.updateBackgroundImage = this.updateBackgroundImage.bind(this);\n        this.changeIndex = this.changeIndex.bind(this);\n    }\n    componentDidMount(){\n        setInterval(this.updateBackgroundImage, 10000);\n    }\n    changeIndex(idx){\n        this.setState({\n            currentPageIndex: idx\n        });\n    }\n    updateBackgroundImage(){\n        this.setState({\n            backgroundImage: (this.state.backgroundImage + 1) % splashImages.length\n        })\n    }\n    render(){\n        const {currentPageIndex, backgroundImage}= this.state;\n        return (\n            <div className=\"App\" style={{backgroundImage: `url(images/${splashImages[backgroundImage]})`}}>\n                <nav className=\"nav\">\n                    <div className=\"same-page\">\n                        {navLinks.map((el, idx) => {\n                            return <span key={idx} className={currentPageIndex === idx ? \"selected\" : \"\"} onClick={() => this.changeIndex(idx)}>\n                                {el}\n                            </span>\n                        })}\n                    </div>\n                    <div className=\"download\">\n                        <span onClick={() => this.changeIndex(2)}>\n                            <img src=\"images/social/resume.svg\" alt=\"Resume\"/>\n                            Resume\n                        </span>\n                    </div>\n                    <div className=\"new-page\">\n                        <a href=\"https://github.com/jonbent\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <img src=\"images/social/octicon.svg\" alt=\"Github\"/>\n                            Github\n                        </a>\n                        <a href=\"https://www.linkedin.com/in/jon-bent/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <img src=\"images/social/linkedin.svg\" alt=\"LinkedIn\"/>\n                            LinkedIn\n                        </a>\n                        <a href=\"https://angel.co/jon-bent-1\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            <img src=\"images/social/angellist.svg\" alt=\"AngelList\"/>\n                            AngelList\n                        </a>\n                    </div>\n                </nav>\n                <Splash currentPageIndex={currentPageIndex} changeIndex={this.changeIndex}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}